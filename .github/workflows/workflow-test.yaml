name: terraform-worfklow

on:
  push:
    branches:
    - main
    - staging
    - develop
    paths:
    - '**'

jobs:
  init:
    name: Initialization
    runs-on: ubuntu-latest
    outputs:
      sha7: ${{ steps.params.outputs.sha7 }}
      work_depth: ${{ steps.params.outputs.work_depth }}
      threads: ${{ steps.params.outputs.threads }}
      dev_directories: ${{ steps.params.outputs.dev_directories }}
      test_directories: ${{ steps.params.outputs.test_directories }}
      prod_directories: ${{ steps.params.outputs.prod_directories }}
      cache_key: ${{ steps.params.outputs.cache_key }}
    steps:
      # Define an SSH key to access private repositories if necessary
      - name: Start SSH agent
        id: ssh
        if: env.SSH_PRIVATE_KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Get the sources to get the parameters and prepare caching
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          path: sources/
          submodules: true

      # Definition of all the variables which will be used for the differents jobs
      - name: Define parameters
        id: params
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo "[i] Defining parameters"

          # Global settings
          echo GITHUB_SHA=${GITHUB_SHA}
          GITHUB_SHORTSHA=${GITHUB_SHA:0:7}
          echo GITHUB_SHORTSHA=${GITHUB_SHORTSHA}

          echo GITHUB_REF=$GITHUB_REF
          GITHUB_BRANCH=${GITHUB_REF##*/}
          echo GITHUB_BRANCH=$GITHUB_BRANCH

          echo "::set-output name=sha7::$GITHUB_SHORTSHA"
          if [ "$GITHUB_BRANCH" == "main" ]
          then
              WORK_DEPTH=3
          elif [ "$GITHUB_BRANCH" == "staging" ]
          then
              WORK_DEPTH=2
          elif [ "$GITHUB_BRANCH" == "develop" ]
          then
              WORK_DEPTH=1
          else
              echo "[-] Error unaccepted branch name"
              exit 1
          fi
          echo "::set-output name=work_depth::${WORK_DEPTH}"

          # Threads used for loading several jobs in parallel
          source "sources/.github/workflows/params.env"
          echo "::set-output name=threads::$TF_THREADS"

          # Development working directories
          if [ "$TF_DEV_DIRECTORIES" == "" ]
          then
              TF_DEV_DIRECTORIES="[\".\"]"
          fi
          echo "::set-output name=dev_directories::$TF_DEV_DIRECTORIES"

          # Testing working directories
          if [ "$TF_TEST_DIRECTORIES" == "" ]
          then
              TF_TEST_DIRECTORIES="[\".\"]"
          fi
          echo "::set-output name=test_directories::$TF_TEST_DIRECTORIES"

          # Production working directories
          if [ "$TF_PROD_DIRECTORIES" == "" ]
          then
              TF_PROD_DIRECTORIES="[\".\"]"
          fi
          echo "::set-output name=prod_directories::$TF_PROD_DIRECTORIES"

          # Define cache key
          echo "::set-output name=cache_key::terraform-$GITHUB_SHORTSHA-$(/bin/date -u "+%Y%m%d-%H%M%S")"

      # Print all the variables used in the next jobs
      - name: Show output values
        id: print
        run: |
          echo "sha7=${{ steps.params.outputs.sha7 }}"
          echo "work_depth=${{ steps.params.outputs.work_depth }}"
          echo "threads=${{ steps.params.outputs.threads }}"
          echo "dev_directories=${{ steps.params.outputs.dev_directories }}"
          echo "test_directories=${{ steps.params.outputs.test_directories }}"
          echo "prod_directories=${{ steps.params.outputs.prod_directories }}"
          echo "cache_key=${{ steps.params.outputs.cache_key }}"

      # Push the source in the cache
      - name: Upload cache
        id: cache
        uses: actions/cache@v3
        with:
          path: sources/
          key: ${{ steps.params.outputs.cache_key }}

  dev-check:
    name: Check codes
    needs: [init]
    runs-on: ubuntu-latest
    if: needs.init.outputs.work_depth >= '1'
    environment: development
    strategy:
      max-parallel: ${{ needs.init.outputs.threads }}
      matrix:
        content: ${{ fromJson(needs.init.outputs.dev_directories) }}
    # Restrict the bash operation in the specific directory to format and validate the code
    defaults:
      run:
        shell: bash
        working-directory: sources/${{ matrix.directory }}
    steps:
      # Define an SSH key to access private repositories if necessary
      - name: Start SSH agent
        id: ssh
        if: env.SSH_PRIVATE_KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Get the sources previously added in the cache
      - name: Download cache
        id: cache
        uses: actions/cache@v3
        with:
          path: sources/
          key: ${{ needs.init.outputs.cache_key }}

      # Install the latest version of Terraform
      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1

      # Move the backend file to not be seen during the terraform initialization
      - name: Disable the backend file
        id: disable-backend
        run: |
          if [ -f "backend.tf" ]
          then
            mv backend.tf backend._tf
          fi

      # Initialize a new Terraform working directory by downloading modules
      - name: Terraform init
        id: init
        run: terraform init

      # Validate the configuration files
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      # Check that all Terraform configuration files are cleaned
      - name: Terraform format
        id: format
        run: terraform fmt -recursive -no-color

      # Restore the backend file in its previous path to be catched in the pull request
      - name: Disable the backend file
        id: enable-backend
        run: |
          if [ -f "backend._tf" ]
          then
            mv backend._tf backend.tf
          fi

      # Clean up the loaded .terraform directory which could be catched in the pull request
      - name: Remove Terraform working space and the credentials
        id: clean
        run: rm -vrf .terraform/

  dev-pull-request:
    name: Commit changes
    needs: [dev-check]
    runs-on: ubuntu-latest
    if: needs.init.outputs.work_depth >= '1'
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 41

  test-deploy:
    name: Deploy on staging environment
    needs: [init, dev-pull-request]
    runs-on: ubuntu-latest
    if: needs.init.outputs.work_depth >= '2'
    environment: testing
    strategy:
      max-parallel: ${{ needs.init.outputs.threads }}
      matrix:
        content: ${{ fromJson(needs.init.outputs.test_directories) }}
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 42

  prod-deploy:
    name: Deploy on production
    needs: [init, test-deploy]
    runs-on: ubuntu-latest
    if: needs.init.outputs.work_depth >= '3'
    environment: production
    strategy:
      max-parallel: ${{ needs.init.outputs.threads }}
      matrix:
        content: ${{ fromJson(needs.init.outputs.prod_directories) }}
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 43
