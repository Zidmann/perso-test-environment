name: terraform-worfklow

on:
  push:
    branches:
    - main
    - staging
    - develop
    paths:
    - '**'

jobs:
  init:
    name: Initialization
    runs-on: ubuntu-latest
    outputs:
      sha7: ${{ steps.param.outputs.sha7 }}
      threads: ${{ steps.param.outputs.threads }}
      execute_check: ${{ steps.param.outputs.execute_check }}
      execute_test: ${{ steps.param.outputs.execute_test }}
      execute_deploy: ${{ steps.param.outputs.execute_deploy }}
      dev_directories: ${{ steps.param.outputs.dev_directories }}
      test_directories: ${{ steps.param.outputs.test_directories }}
      prod_directories: ${{ steps.param.outputs.prod_directories }}
    steps:
      - name: Define settings
        id: param
        env:
          GITHUB_REF: ${{ github.ref }} 
          GITHUB_SHA: ${{ github.sha }}
        run: |
          GITHUB_SHORTSHA=${GITHUB_SHA:0:7}
          GITHUB_BRANCH=${GITHUB_REF##*/}
          echo GITHUB_SHA=$GITHUB_SHA
          echo GITHUB_SHORTSHA=$GITHUB_SHORTSHA
          echo GITHUB_REF=$GITHUB_REF
          echo GITHUB_BRANCH=$GITHUB_BRANCH

          if [ "$GITHUB_BRANCH" == "main" ]
          then
              echo "::set-output name=execute_test::1"
              echo "::set-output name=execute_deploy::1"
          elif [ "$GITHUB_BRANCH" == "staging" ]
          then
              echo "::set-output name=execute_test::1"
              echo "::set-output name=execute_deploy::0"
          elif [ "$GITHUB_BRANCH" == "develop" ]
          then
              echo "::set-output name=execute_test::0"
              echo "::set-output name=execute_deploy::0"
          else
              echo "[-] Error unaccepted branch name"
              exit 1
          fi
          echo "::set-output name=sha7::$GITHUB_SHORTSHA"
          echo "::set-output name=threads::8"

          # Development working directories
          if [ "${{ secrets.DEV_DIRECTORIES }}" != "" ]
          then
              echo "::set-output dev_directories=${{ secrets.DEV_DIRECTORIES }}"
          else
              echo "::set-output dev_directories=[\".\"]"
          fi

          # Testing working directories
          if [ "${{ secrets.TEST_DIRECTORIES }}" != "" ]
          then
              echo "::set-output test_directories=${{ secrets.TEST_DIRECTORIES }}"
          else
              echo "::set-output test_directories=[\".\"]"
          fi

          # Production working directories
          if [ "${{ secrets.PROD_DIRECTORIES }}" != "" ]
          then
              echo "::set-output prod_directories=${{ secrets.PROD_DIRECTORIES }}"
          else
              echo "::set-output prod_directories=[\".\"]"
          fi
      - name: Show output values
        id: print
        run: |
          echo "sha7=${{ steps.param.outputs.sha7 }}"
          echo "threads=${{ steps.param.outputs.threads }}"
          echo "execute_test=${{ steps.param.outputs.execute_test }}"
          echo "execute_deploy=${{ steps.param.outputs.execute_deploy }}"
          echo "dev_directories=${{ steps.param.outputs.dev_directories }}"
          echo "test_directories=${{ steps.param.outputs.test_directories }}"
          echo "prod_directories=${{ steps.param.outputs.prod_directories }}"

  dev-fmt:
    name: Format Terraform codes
    needs: [init]
    runs-on: ubuntu-latest
    environment: development
    strategy:
      max-parallel: 1
      matrix:
        content: ${{ fromJson(needs.init.outputs.dev_directories) }}
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 40

  dev-pull-request:
    name: Commit changes
    needs: [dev-fmt]
    runs-on: ubuntu-latest
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 41

  test-deploy:
    name: Deploy on staging environment
    needs: [init, dev-pull-request]
    runs-on: ubuntu-latest
    if: needs.init.outputs.execute_test == '1'
    environment: testing
    strategy:
      max-parallel: 1
      matrix:
        content: ${{ fromJson(needs.init.outputs.test_directories) }}
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 42

  prod-deploy:
    name: Deploy on production
    needs: [init, test-deploy]
    runs-on: ubuntu-latest
    if: needs.init.outputs.execute_deploy == '1'
    environment: production
    strategy:
      max-parallel: 1
      matrix:
        content: ${{ fromJson(needs.init.outputs.prod_directories) }}
    steps:
      - name: Simple echo
        id: echo
        run: |
          echo 43
